// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkg

func f[T any](x interface{}) T {
	return x.(T)
}
func f2[T any](x interface{}) (T, bool) {
	t, ok := x.(T)
	return t, ok
}

type I interface {
	foo()
}

type myint int

func (myint) foo() {
}

type myfloat float64

func (myfloat) foo() {
}

func g[T I](x I) T {
	return x.(T)
}
func g2[T I](x I) (T, bool) {
	t, ok := x.(T)
	return t, ok
}

func h[T any](x interface{}) struct{ a, b T } {
	return x.(struct{ a, b T })
}

func k[T any](x interface{}) interface{ bar() T } {
	return x.(interface{ bar() T })
}

type mybar int

func (x mybar) bar() int {
	return int(x)
}

type large struct{ a, b, c, d, e, f int } // TODO failes in function body because is not allowed there

func main() {
	var i interface{} = int(3)
	var j I = myint(3)
	// var x interface{} = float64(3) TODO fails because float is not identityPreserving
	// var y I = myfloat(3) TODO fails because 3 cannot be converted to float (can fix it when using underlyingType in conversion)

	f[int](i)
	f2[int](i)
	// f2[int](x)

	g[myint](j)
	g2[myint](j)
	// g2[myint](y)

	var _ = h[int](struct{ a, b int }{3, 5}).a

	k[int](mybar(3)).bar()

	var _ = f[large](large{}).a
	l2, ok := f2[large](large{})

	var _ = l2
	var _ = ok
}
